function dist = waverecon(img, ref)

% Wavefront Reconstruction
% waverecon reconstructs the wavefront of input images from a
% Shack-Hartmann sensor using Zernike polynomials. It takes two inputs:
% 1) ref : which would be the reference image (plane wavefront)
% 2) img : image whose wavefront is reconstructed.                             
% 
% Basic analytical formulae are used to find the Zernike coefficients.
% 
% Example:
% 
% img = 'trial.jpg';
% ref = 'ref.jpg';
% 
% waverecon(img,ref);

%% Image processing to find the center and to reduce clusters to points

reft = imagepro(ref);
imgt = imagepro(img);
centref = centroid(ref);
centreimg = centroid(img);

%% Centering of the points (Normalisation)
normref = reft - centref; 
normimg = imgt - centreimg;

%% Calculating the indices for the nearest neighbours

indpoint = knnsearch(normimg,normref);

%% Distance calculation between nearest neighbouring points

dist = [];

for i = 1 :size(normref,1)
tempdist = normimg(indpoint(i),:) - normref(i,:);
dist = vertcat(dist,tempdist);
end

%% Zernike coefficient analysis

xpos = dist(:,1);
ypos = dist(:,2);
numberoflenslets = size(dist,1);

Zx(:,1) = zeros(numberoflenslets,1);
Zx(:,2) = zeros(numberoflenslets,1);
Zx(:,3) = sqrt(6)*mean((-2*xpos),2);
Zx(:,4) = sqrt(6)*mean((2*ypos),2);
Zx(:,5) = sqrt(3)*mean((4*xpos),2);
Zx(:,6) = sqrt(8)*mean((-6*xpos.*ypos),2);
Zx(:,7) = sqrt(8)*mean((-3*xpos.^2+3*ypos.^2),2);
Zx(:,8) = sqrt(8)*mean((6*xpos.*ypos),2); 
Zx(:,9) = sqrt(8)*mean((-2 + 9 * xpos.^2 + 3* ypos.^2).*xpos,2);
Zx(:,10) = sqrt(10)*mean((4*xpos.^3 -12 *xpos.*(ypos.^2)),2);
Zx(:,11) = sqrt(10)*mean((-(12*xpos.^2).*ypos + 4*ypos.^3),2);
Zx(:,12) = sqrt(10)*mean((6*xpos - 16*xpos.^3),2);
Zx(:,13) = sqrt(10)*mean((-6*ypos + 24*(xpos.^2).*ypos + 8*ypos.^3),2);
Zx(:,14) = sqrt(5)*mean((-12*xpos + 24*xpos.^3+24*xpos.*(ypos).^2),2);

Zy(:,1) = zeros(numberoflenslets,1);
Zy(:,2) = zeros(numberoflenslets,1);
Zy(:,3) = sqrt(6)*mean((2*ypos),2);
Zy(:,4) = sqrt(6)*mean(2*xpos,2);
Zy(:,5) = sqrt(3)*mean(4*ypos,2);
Zy(:,6) = sqrt(8)*mean((-3*xpos.^2+3*ypos.^2),2);
Zy(:,7) = sqrt(8)*mean((6*xpos.*ypos),2);
Zy(:,8) = sqrt(8)*mean((-2 + 9 * ypos.^2 + 3* xpos.^2).*ypos,2);
Zy(:,9) = sqrt(8)*mean((6*xpos.*ypos),2);
Zy(:,10) = sqrt(10)*mean((4*ypos.^3 -12 *(xpos.^2).*ypos),2);
Zy(:,11) = sqrt(10)*mean(((12*ypos.^2).*xpos - 4*xpos.^3),2);
Zy(:,12) = sqrt(5)*mean((-6*ypos + 16*ypos.^3),2);
Zy(:,13) = sqrt(10)*mean((-6*xpos + 24*(ypos.^2).*xpos + 8*xpos.^3),2);
Zy(:,14) = sqrt(10)*mean((-12*ypos + 24*ypos.^3+24*ypos.*(xpos).^2),2);

Z = [Zx;Zy];

mZ = mean(Z);

%% Plotting results

x = -1:0.01:1;
[X,Y] = meshgrid(x,x);
[theta,r] = cart2pol(X,Y);
idx = r<=1;
p = 0:14;
z = nan(size(X));
y = zernfun2(p,r(idx),theta(idx));
figure('Units','normalized')
for k = 1:length(p)
    z(idx) = mZ(1,1) * y(:,1)+ mZ(1,2) * y(:,2)+mZ(1,3) * y(:,3)+ mZ(1,4) * y(:,4) + mZ(1,5) * y(:,5)+ mZ(1,6) * y(:,6)+ mZ(1,7) * y(:,7)+mZ(1,8) * y(:,8)+mZ(1,9) * y(:,9)+mZ(1,10) * y(:,10)+mZ(1,11) * y(:,11)+mZ(1,12) * y(:,12)+mZ(1,13) * y(:,13)+mZ(1,14) * y(:,14);
    subplot(1,1,k)
    pcolor(x,x,z), shading interp
    set(gca,'XTick',[],'YTick',[])
    axis square
    title(['Z_{' num2str(p(k)) '}'])
end

